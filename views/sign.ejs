<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SignPad</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" 
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" 
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@3.0.0-beta.3/dist/signature_pad.umd.min.js"></script>
    <link rel="stylesheet" href="./stylesheets/signpad.css">
    <script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-1.9.1.min.js" integrity="sha256-wS9gmOZBqsqWxgIVgA8Y9WcQOa7PgSIX+rPA0VL2rbQ=" crossorigin="anonymous"></script> 
</head>
<body>
    <!-- Button trigger modal -->
   
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"
     integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" 
    integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>
</body>

<script>

var canvas = document.getElementById('signature-pad');

// Adjust canvas coordinate space taking into account pixel ratio,
// to make it look crisp on mobile devices.
// This also causes canvas to be cleared.
function resizeCanvas() {
    // When zoomed out to less than 100%, for some very strange reason,
    // some browsers report devicePixelRatio as less than 1
    // and only part of the canvas is cleared then.
    var ratio =  Math.max(window.devicePixelRatio || 1, 1);
    canvas.width = canvas.offsetWidth * ratio;
    canvas.height = canvas.offsetHeight * ratio;
    canvas.getContext("2d").scale(ratio, ratio);
}

window.onresize = resizeCanvas;
// resizeCanvas();

var signaturePad = new SignaturePad(canvas, {
  backgroundColor: 'rgb(255, 255, 255,0)', // necessary for saving image as JPEG; can be removed is only saving as PNG or SVG
  penColor:'rgb(0, 0, 0)'
});

document.getElementById('save').addEventListener('click', function () {
  if (signaturePad.isEmpty()) {
    return alert("Please provide a signature first.");
  }
  
  var data = signaturePad.toDataURL('image/png');

// Send data to server instead... 
  window.open(data);
});

document.getElementById('clear').addEventListener('click', function () {
  signaturePad.clear();
});

document.getElementById('apply').addEventListener('click',()=>{
  var data = signaturePad.toDataURL('image/png');
  var pageCanvas=document.querySelector('#page-1');
  var pageContext=pageCanvas.getContext('2d');
  var scaleup=document.getElementById('scaleup');
  var holder= document.getElementById('holder-page-1');
  pageContext.save();
  var signcanvas=document.createElement('canvas');
      var signContext=signcanvas.getContext('2d');
      signcanvas.setAttribute('id','sign');
      signcanvas.width=pageCanvas.offsetWidth;
      signcanvas.height=pageCanvas.offsetHeight;
  var page=new Image();
  page.src=pageCanvas.toDataURL('image/jpeg');
  document.body.appendChild(page);
  var img =new Image();
  img.src=data;
  img.onload=()=>{
    console.log(img.width,img.height)
    console.log("happen");
    console.log(holder.contains(document.getElementById('sign')));
    if(holder.contains(document.getElementById('sign'))){
      // document.getElementById('holder-page-1').remove(document.getElementById('sign'));
      document.getElementById('sign') .remove();
      holder.appendChild(signcanvas);
     
      console.log("contains");
    }
    else{
      holder.appendChild(signcanvas);
      console.log("added");

    }
    
    
  
  function draw(scale, translatePos){
    var canvas =signcanvas;
    var context = signContext;

    // clear canvas
    context.clearRect(0, 0, canvas.width, canvas.height);
 
    context.save();
    context.translate(translatePos.x, translatePos.y);
    context.scale(scale, scale);
    context.drawImage(img,0,0,60,20);
    
    context.closePath(); // complete custom shape
    context.restore();
    // console.log(translatePos)
}
 
var initialize = (function(){
    var canvas = signcanvas;
 
    var translatePos = {
        x: canvas.width / 2,
        y: canvas.height / 2
    };
 
    var scale = 3.0;
    var scaleMultiplier = .661;
    var startDragOffset = {};
    var mouseDown = false;
 
    // add button event listeners
    document.getElementById("scaleup").addEventListener("click", function(){
        scale /= scaleMultiplier;
        draw(scale, translatePos);
    }, false);
 
    document.getElementById("scaledown").addEventListener("click", function(){
        scale *= scaleMultiplier;
        draw(scale, translatePos);
    }, false);
 
    // add event listeners to handle screen drag
    canvas.addEventListener("mousedown", function(evt){
        mouseDown = true;
        startDragOffset.x = evt.clientX - translatePos.x;
        startDragOffset.y = evt.clientY - translatePos.y;
    });
 
    canvas.addEventListener("mouseup", function(evt){
        mouseDown = false;
    });
 
    canvas.addEventListener("mouseover", function(evt){
        mouseDown = false;
    });
 
    canvas.addEventListener("mouseout", function(evt){
        mouseDown = false;
    });
 
    canvas.addEventListener("mousemove", function(evt){
        if (mouseDown) {
            translatePos.x = evt.clientX - startDragOffset.x;
            translatePos.y = evt.clientY - startDragOffset.y;
            draw(scale, translatePos);
        }
    });
 
    draw(scale, translatePos);
}());}
  })
  function pdfDownloader(){
console.log('pdfd');
var HTML_Width = $(".container").width();
var HTML_Height = $(".container").height();
var top_left_margin = 0;
var PDF_Width = HTML_Width+(top_left_margin*4);
var PDF_Height = (PDF_Width*1.5)+(top_left_margin*0.2);
var canvas_image_width = HTML_Width;
var canvas_image_height = HTML_Height;

var totalPDFPages = Math.ceil(HTML_Height/PDF_Height)-1;


html2canvas($(".container")[0],{allowTaint:true}).then(function(canvas) {
  canvas.getContext('2d');
  
  console.log(canvas.height+"  "+canvas.width);
  
  
  var imgData = canvas.toDataURL("image/jpeg", 1.0);
  var pdf = new jsPDF('p', 'pt',  [PDF_Width, PDF_Height]);
    pdf.addImage(imgData, 'JPG', top_left_margin, top_left_margin,canvas_image_width,canvas_image_height);
  
  
  for (var i = 1; i <= totalPDFPages; i++) { 
    pdf.addPage(PDF_Width, PDF_Height);
    pdf.addImage(imgData, 'JPG', top_left_margin, -(PDF_Height*i)+(top_left_margin*1),canvas_image_width,canvas_image_height);
  }
  
    pdf.save("HTML-Document.pdf");
    });
};

</script>
</html>

